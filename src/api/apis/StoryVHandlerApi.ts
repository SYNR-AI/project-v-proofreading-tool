/* tslint:disable */
/* eslint-disable */
/**
 * StoryVHandler API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetEpisodeMessagesResp,
  GetStoryResp,
  RegisterResp,
  ScanStoryResp,
  Status,
  UserActionLogReq,
  UserActionLogResp,
} from '../models/index';
import {
    GetEpisodeMessagesRespFromJSON,
    GetEpisodeMessagesRespToJSON,
    GetStoryRespFromJSON,
    GetStoryRespToJSON,
    RegisterRespFromJSON,
    RegisterRespToJSON,
    ScanStoryRespFromJSON,
    ScanStoryRespToJSON,
    StatusFromJSON,
    StatusToJSON,
    UserActionLogReqFromJSON,
    UserActionLogReqToJSON,
    UserActionLogRespFromJSON,
    UserActionLogRespToJSON,
} from '../models/index';

export interface StoryVHandlerGetEpisodeMessagesRequest {
    episodeId?: number;
}

export interface StoryVHandlerGetStoryRequest {
    storyId?: number;
}

export interface StoryVHandlerRegisterRequest {
    body: object;
}

export interface StoryVHandlerScanStoryRequest {
    cursor?: number;
}

export interface StoryVHandlerSendUserActionLogRequest {
    userActionLogReq: UserActionLogReq;
}

/**
 * 
 */
export class StoryVHandlerApi extends runtime.BaseAPI {

    /**
     */
    async storyVHandlerGetEpisodeMessagesRaw(requestParameters: StoryVHandlerGetEpisodeMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEpisodeMessagesResp>> {
        const queryParameters: any = {};

        if (requestParameters['episodeId'] != null) {
            queryParameters['episode_id'] = requestParameters['episodeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/episodes/messages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEpisodeMessagesRespFromJSON(jsonValue));
    }

    /**
     */
    async storyVHandlerGetEpisodeMessages(requestParameters: StoryVHandlerGetEpisodeMessagesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEpisodeMessagesResp> {
        const response = await this.storyVHandlerGetEpisodeMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async storyVHandlerGetStoryRaw(requestParameters: StoryVHandlerGetStoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStoryResp>> {
        const queryParameters: any = {};

        if (requestParameters['storyId'] != null) {
            queryParameters['story_id'] = requestParameters['storyId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/stories/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStoryRespFromJSON(jsonValue));
    }

    /**
     */
    async storyVHandlerGetStory(requestParameters: StoryVHandlerGetStoryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStoryResp> {
        const response = await this.storyVHandlerGetStoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async storyVHandlerRegisterRaw(requestParameters: StoryVHandlerRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterResp>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling storyVHandlerRegister().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/user/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterRespFromJSON(jsonValue));
    }

    /**
     */
    async storyVHandlerRegister(requestParameters: StoryVHandlerRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterResp> {
        const response = await this.storyVHandlerRegisterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async storyVHandlerScanStoryRaw(requestParameters: StoryVHandlerScanStoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScanStoryResp>> {
        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/stories/scan`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScanStoryRespFromJSON(jsonValue));
    }

    /**
     */
    async storyVHandlerScanStory(requestParameters: StoryVHandlerScanStoryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScanStoryResp> {
        const response = await this.storyVHandlerScanStoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async storyVHandlerSendUserActionLogRaw(requestParameters: StoryVHandlerSendUserActionLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserActionLogResp>> {
        if (requestParameters['userActionLogReq'] == null) {
            throw new runtime.RequiredError(
                'userActionLogReq',
                'Required parameter "userActionLogReq" was null or undefined when calling storyVHandlerSendUserActionLog().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/track/user-action-log`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserActionLogReqToJSON(requestParameters['userActionLogReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserActionLogRespFromJSON(jsonValue));
    }

    /**
     */
    async storyVHandlerSendUserActionLog(requestParameters: StoryVHandlerSendUserActionLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserActionLogResp> {
        const response = await this.storyVHandlerSendUserActionLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
